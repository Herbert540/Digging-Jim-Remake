#include "controller.hxx"
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int
main()
{
    /// Vectors to initialize positions
    std::vector<Position> wall_positions;
    std::vector<Position> sand_positions;
    std::vector<Position> rock_postions;
    std::vector<Position> diamond_positions;

    /// Game map for initialization
    char map[19][35] = {
            {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'},
            {'.','p','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','.'},
            {'.','#','o','o','#','#','#','o','#','#','#','#','#','#','#','#','#','#','#','#','#','o','o','#','#','#','#','#','#','#','#','#','#','#','.'},
            {'.','#','#','*','o','o','o','o','*','#','#','#','#','#','#','#','#','#','#','#','#','o','*','o','#','#','#','#','#','#','#','#','#','#','.'},
            {'.','.','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#','#','#','#','#','#','o','#','#','#','o','o','o','o','o','o','s','.'},
            {'.','#','#','#','#','o','#','#','#','#','s','s','o','#','#','#','o','s','o','o','#','o','#','#','#','#','#','o','*','#','#','.','#','#','.'},
            {'.','#','#','#','#','o','#','#','#','#','#','#','o','#','#','o','*','#','o','*','#','#','#','#','#','#','#','o','.','#','s','#','#','#','.'},
            {'.','o','o','#','o','o','#','#','#','#','#','#','.','#','#','o','#','#','o','#','#','#','#','#','#','#','#','o','*','*','#','#','#','#','.'},
            {'.','.','o','#','*','o','#','#','#','#','o','.','.','.','.','.','.','.','.','.','.','.','.','.','o','#','#','o','o','.','#','#','#','#','.'},
            {'.','o','#','s','o','#','#','#','#','#','o','#','#','#','#','#','#','#','#','#','.','#','#','.','.','*','#','.','o','o','o','o','o','#','.'},
            {'.','o','#','o','#','#','#','#','#','o','o','#','#','#','#','#','#','#','#','#','s','#','#','#','.','.','#','#','#','#','#','.','.','s','.'},
            {'.','.','.','.','.','#','#','#','#','o','o','o','#','#','#','#','#','#','#','o','s','o','#','#','#','.','.','*','#','#','s','s','o','*','.'},
            {'.','#','#','#','.','#','#','#','#','#','#','o','#','#','#','#','#','#','#','o','.','o','#','#','#','#','.','.','o','#','s','.','*','o','.'},
            {'.','*','*','*','o','o','#','#','#','#','#','#','#','#','o','#','o','#','#','#','.','*','#','#','#','#','#','.','.','#','o','.','o','*','.'},
            {'.','*','*','*','.','#','#','#','#','#','#','#','#','o','o','#','o','o','#','#','.','#','.','#','#','#','#','#','.','#','*','.','.','s','.'},
            {'.','.','o','.','.','.','#','#','#','#','#','#','#','o','.','#','.','o','#','#','*','#','.','#','#','#','#','#','.','#','o','#','#','#','.'},
            {'.','#','o','#','#','.','.','#','#','#','#','#','#','.','o','#','o','.','#','#','#','#','.','#','#','#','#','#','s','s','.','#','#','#','.'},
            {'.','#','#','#','#','#','#','#','#','#','#','#','#','o','.','#','.','o','#','#','#','#','.','#','#','#','#','#','*','s','#','#','#','#','.'},
            {'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'}
    };


    char sign;
    for (int i = 0; i < 19; i++)
    {
        for (int j = 0; j < 35; j++)
        {
            sign = map[i][j];

            if(sign == '#'){
                sand_positions.push_back({j*40,i*40});
            } else if (sign == 'o'){
                rock_postions.push_back({j*40,i*40});
            } else if(sign == '.'){
                wall_positions.push_back({j*40,i*40});
            } else if (sign == '*'){
                diamond_positions.push_back({j*40, i*40});
            }
        }
    }


    /// Initializing controler with positions
    Controller(wall_positions,
               rock_postions,
               diamond_positions,
               sand_positions).run();

    return 0;
}
